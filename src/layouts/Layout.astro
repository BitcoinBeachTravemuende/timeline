---
import "../styles/base.css";

import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Events from "../components/Events.astro";
import type { Lang, Event as BBTEvent } from "../types";
import { useTranslations } from "../i18n";
import { getEntry } from "astro:content";

interface Props {
  lang: Lang;
}

const { lang } = Astro.props;

const entries = await getEntry("events", "events");

const data = entries.data;
const events = data
  // latest to the top
  .sort((a: BBTEvent, b: BBTEvent) => b.block - a.block);

const t = useTranslations(lang);
---

<!doctype html>
<html lang={lang} x-data x-bind:class="{ 'dark': $store.darkMode.on }">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Bitcoin Beach Travem√ºnde - {t("title")}</title>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 ease">
    <Header events={events} lang={lang} />
    <main class="container mx-auto px-6">
      <Events events={events} lang={lang} />
    </main>
    <Footer lang={lang} />
  </body>
</html>

<script>
  import Alpine from "alpinejs";
  import collapse from "@alpinejs/collapse";
  import intersect from "@alpinejs/intersect";
  import persist from "@alpinejs/persist";

  window.Alpine = Alpine;
  Alpine.plugin(collapse);
  Alpine.plugin(intersect);
  Alpine.plugin(persist);

  const darkModeStore = {
    on: false,
    init() {
      this.on = Alpine.$persist(
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ).as("darkMode") as unknown as boolean; // override type
    },
    toggle() {
      this.on = !this.on;
    },
  };

  Alpine.store("darkMode", darkModeStore);

  Alpine.start();
</script>
